{"version":3,"sources":["js/utils.js","js/timer.js","index.js"],"names":["pad","value","String","padStart","getTimeComponents","time","days","Math","floor","hours","mins","secs","CountdownTimer","selector","targetDate","document","getElementById","querySelector","init","setInterval","currentTime","deltaTime","Date","now","updateClockface","clearInterval","textContent","start"],"mappings":"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","file":"src.a67a6053.js","sourceRoot":"../src","sourcesContent":["function pad(value)\n{\n    return String(value).padStart(2, '0');\n}\n\nexport function getTimeComponents(time)\n{\n    /*\n    * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n    * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n    */\n    const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n    /*\n    * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n    * остатка % и делим его на количество миллисекунд в одном часе\n    * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n    */\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n    /*\n    * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n    * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n    */\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n    /*\n    * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n    * миллисекунд в одной секунде (1000)\n    */\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n}","import { getTimeComponents } from \"./utils\";\n\nclass CountdownTimer {\n    #timer;\n    #days;\n    #hours;\n    #mins;\n    #secs;\n    #targetDate;\n    #intervalId = null;\n    #isActive = false;\n\n    constructor({ selector, targetDate }) {\n        this.#timer = document.getElementById(selector);\n        this.#days = document.querySelector('[data-value=\"days\"]');\n        this.#hours = document.querySelector('[data-value=\"hours\"]');\n        this.#mins = document.querySelector('[data-value=\"mins\"]');\n        this.#secs = document.querySelector('[data-value=\"secs\"]');\n        this.#targetDate = targetDate;\n        this.init();\n    }\n\n    start() {\n        if (this.#isActive) return;\n        this.#isActive = true;\n\n        this.#intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = (currentTime - this.#targetDate) * -1;\n            const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n            this.updateClockface({ days, hours, mins, secs });\n        }, 1000);\n    }\n\n    stop() {\n        if (this.#intervalId) {\n            clearInterval(this.#intervalId);\n            this.#intervalId = null;\n            this.#isActive = false;\n            const { days, hours, mins, secs } = getTimeComponents(this.#targetDate - Date.now());\n            this.updateClockface({ days, hours, mins, secs });\n        }\n    }\n\n    init() {\n        this.updateClockface(getTimeComponents(this.#targetDate - Date.now()));\n    }\n\n    updateClockface({ days, hours, mins, secs }) {\n        this.#days.textContent = days;\n        this.#hours.textContent = hours;\n        this.#mins.textContent = mins;\n        this.#secs.textContent = secs;\n    }\n\n}\n\nnew CountdownTimer({\n    selector: '#timer-1',\n    //   targetDate: new Date('Jul 17, 2019'),\n    targetDate: new Date('Oct 18, 2021'),\n}).start();\n","import './scss/main.scss';\nimport './js/timer.js';"]}